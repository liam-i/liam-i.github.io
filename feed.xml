<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://liam-i.github.io/</id><title>Liam's Li</title><subtitle>Talk is cheap. Show me the code. 这里是李鹏(Liam) 的博客，用来记录一些技术和想法，主要专注于 Swift 和 iOS 开发。</subtitle> <updated>2024-10-18T18:45:01+08:00</updated> <author> <name>Liam</name> <uri>https://liam-i.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://liam-i.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://liam-i.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2024 Liam </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>App：应用程序的结构和行为</title><link href="https://liam-i.github.io/posts/app/" rel="alternate" type="text/html" title="App：应用程序的结构和行为" /><published>2024-05-05T20:05:36+08:00</published> <updated>2024-05-05T20:05:36+08:00</updated> <id>https://liam-i.github.io/posts/app/</id> <content src="https://liam-i.github.io/posts/app/" /> <author> <name>liam</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary>SwiftUI 的 App 协议定义了一个 SwiftUI 应用的顶级结构和行为。 通过遵循 App 协议，你可以定义一个结构体来表示你的整个应用，并使用这个结构体来配置应用的场景和生命周期行为。 定义你的 App 要创建一个遵循 App 协议的结构体，你需要定义一个 body 属性，该属性返回一个或多个 Scene 实例。这些 Scene 描述了应用的用户界面和可能的状态。例如： import SwiftUI @main struct MyApp: App { var body: some Scene { WindowGroup { ContentView() } } } 在这个例子中，MyApp 结构体通过 @main 属性标记为程序的入口，并遵循 App 协议，实现了必需的 body 属性。b...</summary> </entry> <entry><title>SwiftUI 与 UIKit 对标的视图</title><link href="https://liam-i.github.io/posts/swiftui-uikit/" rel="alternate" type="text/html" title="SwiftUI 与 UIKit 对标的视图" /><published>2024-05-03T20:05:36+08:00</published> <updated>2024-05-03T20:05:36+08:00</updated> <id>https://liam-i.github.io/posts/swiftui-uikit/</id> <content src="https://liam-i.github.io/posts/swiftui-uikit/" /> <author> <name>liam</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary>Views &amp;amp;amp; ViewControllers &amp;amp;amp; Controls SwiftUI UIKit View UIView, UIViewController List UITableView, UITableViewController LazyVGrid, LazyHGrid UICollectionView, UICollectionViewController TabView UITabBarController, UIPageViewController Alert, ActionSheet ...</summary> </entry> <entry><title>SwiftUI："some View" 到底是什么类型</title><link href="https://liam-i.github.io/posts/some-view/" rel="alternate" type="text/html" title="SwiftUI：&amp;quot;some View&amp;quot; 到底是什么类型" /><published>2024-05-02T22:28:18+08:00</published> <updated>2024-05-25T19:00:49+08:00</updated> <id>https://liam-i.github.io/posts/some-view/</id> <content src="https://liam-i.github.io/posts/some-view/" /> <author> <name>liam</name> </author> <category term="iOS" /> <category term="SwiftUI" /> <summary>两个同样描述的调整器，调整器的顺序不同，为什么 Text 表现出不同的结果？ some View 图中 text1 的类型是 SwiftUI 的 Text，text2 与 text3 返回的是一个 ModifiedContent 类型。 some View 本质是 ModifiedContent&amp;amp;lt;Content, Modifier&amp;amp;gt; 结构，他包含了两个内容。在多嵌套的状态下，可以看作： some View &amp;amp;lt;–等价–&amp;amp;gt; ModifiedContent&amp;amp;lt;ModifiedContent, 最后一个修饰结构&amp;amp;gt;。 而内部的 ModifiedContent 里面同样递归包含了 ModifiedContent&amp;amp;lt;ModifiedContent, 倒数第二个修饰结构&amp;amp;gt;。 结论 调整器的顺序不同会导致返回不同的 Modi...</summary> </entry> <entry><title>Homebrew Tap：酿造你的个性化 macOS 软件库</title><link href="https://liam-i.github.io/posts/brew-tap/" rel="alternate" type="text/html" title="Homebrew Tap：酿造你的个性化 macOS 软件库" /><published>2024-04-04T22:36:18+08:00</published> <updated>2024-05-25T19:29:13+08:00</updated> <id>https://liam-i.github.io/posts/brew-tap/</id> <content src="https://liam-i.github.io/posts/brew-tap/" /> <author> <name>liam</name> </author> <category term="工具" /> <category term="Homebrew" /> <summary>对于 macOS 用户来说，Homebrew 无疑是一个强大的软件包管理工具，它极大简化了软件的安装、更新和卸载。然而，有时候我们仍然会发现一些特定的、小众的或者专业的软件并不在其中。 这时，Homebrew Tap 就成了救星，它允许我们添加和管理第三方仓库，也可以扩展和定制自己的软件库，从而满足更加个性化的需求。 什么是 Homebrew Tap？ Homebrew Tap 是 Homebrew 的扩展，让用户能添加第三方软件仓库。通过 Tap，能安装和管理 Homebrew 里没有的软件包。每个 Tap 就像独立仓库，提供更多额外的软件包供用户选择。 如何使用 Homebrew Tap？ 使用 Homebrew Tap 很简单。先找到想添加的 Tap (通常是 GitHub 仓库)，然后按命令操作即可。 添加 Tap tap [options] [user/...</summary> </entry> <entry><title>Homebrew 酿酒术：精心调配你的 macOS 软件环境</title><link href="https://liam-i.github.io/posts/brew/" rel="alternate" type="text/html" title="Homebrew 酿酒术：精心调配你的 macOS 软件环境" /><published>2023-12-23T23:56:18+08:00</published> <updated>2024-10-18T18:42:27+08:00</updated> <id>https://liam-i.github.io/posts/brew/</id> <content src="https://liam-i.github.io/posts/brew/" /> <author> <name>liam</name> </author> <category term="工具" /> <category term="Homebrew" /> <summary>Homebrew 意为“家酿”，是一款用 Ruby 开发的包管理器。它像酿酒一样，让用户轻松“酿造”和管理软件环境，无需担心复杂的配置。 通过 Homebrew，用户可以轻松安装、更新和卸载 UNIX 工具和软件包，实现个性化软件管理。目前支持 macOS 和 Linux 系统。 在本文中，将详细介绍 Homebrew 的安装/卸载、模块组成、术语、常用命令等，助你快速上手，并优化你的 macOS (或 Linux) 软件环境。 安装 Homebrew 官网的安装说明位于主页，推荐复制粘贴官网的安装命令。 macOS 环境要求 64-bit Intel CPU 或 Apple Silicon CPU macOS Monterey 12.0 或更高版本 Xcode 的命令行工具 (CLT)，可通过 xcode-select --install 或 develo...</summary> </entry> </feed>
